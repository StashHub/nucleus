generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

enum PhoneType {
    OFFICE
    MOBILE
}

model User {
    id                String    @id @default(cuid())
    name              String?
    email             String    @unique
    password          String?
    emailVerified     DateTime? @map("email_verified")
    image             String?
    accounts          Account[]
    phones            Phone[]
    sessions          Session[]
    companies         Company[]
    role              Role      @default(USER)
    consent           DateTime?
    consent_signature String?
    otpVerified       DateTime?
    tcpaVerified      DateTime?
    created           DateTime  @default(now())
    updated           DateTime  @updatedAt
}

model Phone {
    id      String    @id @default(cuid())
    type    PhoneType @default(OFFICE)
    number  String?
    user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String    @unique @map("user_id")
    created DateTime  @default(now())
    updated DateTime  @updatedAt
}

model Account {
    id                String   @id @default(cuid())
    userId            String   @map("user_id")
    type              String
    provider          String
    providerAccountId String   @map("provider_account_id")
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    created           DateTime @default(now())
    updated           DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token") @db.Text
    userId       String   @map("user_id")
    expires      DateTime
    created      DateTime @default(now())
    updated      DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    created    DateTime @default(now())
    updated    DateTime @updatedAt

    @@unique([identifier, token])
}

model Company {
    id           String       @id @default(cuid())
    name         String
    dba          String?
    ein          String       @unique
    industry     String
    revenue      String?
    filingType   String?      @map("filing_type")
    website      String?
    emp2019      Int          @map("number_of_employees_2019")
    emp2020      Int          @map("number_of_employees_2020")
    emp2021      Int          @map("number_of_employees_2021")
    pt2019       Int          @map("number_of_parttime_employees_2019")
    pt2020       Int          @map("number_of_parttime_employees_2020")
    pt2021       Int          @map("number_of_parttime_employees_2021")
    deal         Deal?
    affiliation  Affiliation?
    addresses    Address[]
    owners       Ownership[]
    ppp          PPP[]
    peo          Peo?
    covid        Covid?
    guardian     Guardian?
    started      DateTime?    @db.Date
    n941xSent    DateTime?    @map("n941_x_sent") @db.Date
    n941xSigned  DateTime?    @map("n941_x_signed") @db.Date
    n8821xSent   DateTime?    @map("n8821_x_sent") @db.Date
    n8821xSigned DateTime?    @map("n8821_x_signed") @db.Date
    created      DateTime     @default(now())
    updated      DateTime     @updatedAt
    owner        User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId      String       @map("owner_id")
}

model Deal {
    id                 String    @id @default(cuid())
    name               String
    cloned             String?
    pipeline           String
    stage              String
    hubspotOwner       String?   @map("hubspot_owner")
    hubspotContactId   String?   @map("hubspot_contact_id")
    estimatedRefund    Decimal?  @default(0) @map("estimated_refund") @db.Money
    awaitingRefundDate DateTime? @map("awaiting_refund_date") @db.Date
    closed             DateTime?
    created            DateTime  @default(now())
    updated            DateTime  @updatedAt
    company            Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId          String    @unique @map("company_id")
}

model Address {
    id        String   @id @default(cuid())
    street    String?
    city      String?
    state     String?
    postal    String?
    created   DateTime @default(now())
    updated   DateTime @updatedAt
    company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId String   @map("company_id")
}

model Guardian {
    id        String  @id @default(cuid())
    url       String?
    consent   String?
    status    String?
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId String  @unique @map("company_id")
}

model Ownership {
    id        String   @id @default(cuid())
    name      String
    stake     Float
    payroll   Boolean
    created   DateTime @default(now())
    updated   DateTime @updatedAt
    company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId String   @map("company_id")
    members   Member[]
}

model Member {
    id           String    @id @default(cuid())
    name         String?
    relationship String?
    payroll      Boolean?
    notes        String?   @db.Text // store honey pot members on payroll (for now)
    created      DateTime  @default(now())
    updated      DateTime  @updatedAt
    ownership    Ownership @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId      String    @map("owner_id")
}

model Affiliation {
    id                  String   @id @default(cuid())
    fundOwnership       Boolean  @map("fund_ownership")
    ownership           Boolean
    owner               Boolean
    claimedCredits      Boolean  @map("claimed_credits")
    controllingInterest Boolean  @map("controlling_interest")
    serviceGroup        Boolean  @map("service_group")
    embargoed           Boolean
    registeredBank      Boolean  @map("registered_bank")
    govermental         Boolean
    created             DateTime @default(now())
    updated             DateTime @updatedAt
    company             Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId           String   @unique @map("company_id")
}

model Peo {
    id           String    @id @default(cuid())
    name         String?
    usesOwnEIN   Boolean   @map("uses_own_ein")
    collaborates Boolean
    requiresERC  Boolean   @map("requires_erc")
    requestedERC Boolean   @map("requested_erc")
    fee          String?
    funding      String?
    started      DateTime? @db.Date
    ended        DateTime? @db.Date
    created      DateTime  @default(now())
    updated      DateTime  @updatedAt
    company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId    String    @unique @map("company_id")
}

model PPP {
    id           String    @id @default(cuid())
    type         String // "Round 1" or "Round 2"
    disbursement DateTime? @db.Date
    coverage     String?
    amount       Decimal?  @default(0) @db.Money
    received     Boolean
    forgiven     String?
    created      DateTime  @default(now())
    updated      DateTime  @updatedAt
    company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId    String    @map("company_id")
}

model Covid {
    id         String    @id @default(cuid())
    disruption String[]
    statement  String?   @db.Text()
    quarters   Quarter[]
    created    DateTime  @default(now())
    updated    DateTime  @updatedAt
    company    Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId  String    @unique @map("company_id")
}

model Quarter {
    id       String   @id @default(cuid())
    ref      String? // 2020 Q1, 2021 Q2
    affected Boolean?
    negative Boolean? // 10% impact
    coverage String?
    covid    Covid    @relation(fields: [covidId], references: [id], onDelete: Cascade)
    covidId  String   @map("covid_id")
}
